Index: src/main/java/com/rein/transplantation/Sequence.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\n *\n * @author Mathis\n * Project : rein-poo-le4\n * Situation in transplantation\n * Description : Séquence class\n */\npackage com.rein.transplantation;\nimport com.rein.instance.Altruiste;\nimport com.rein.instance.Echange;\nimport com.rein.instance.Instance;\nimport com.rein.instance.Noeud;\nimport com.rein.io.InstanceReader;\nimport com.rein.operateur.*;\nimport com.rein.solution.Chaine;\n\nimport java.util.ArrayList;\nimport java.util.List;\npublic abstract class Sequence {\n\npublic abstract class Sequence implements Comparable {\n\n    private int benefMedicalSequence = 0;\n    private ArrayList<Noeud> listeNoeuds =new ArrayList<>();\n    private int tailleMaxSequence;\n\n    public void calculBenefice(List<Echange> listeEchanges){\n       if(this.listeNoeuds.size()>1){\n            for(int i=0;i<this.listeNoeuds.size()-1;i++){\n                Noeud donneur = this.listeNoeuds.get(i);\n                Noeud receveur = this.listeNoeuds.get(i+1);\n                //calcul du bénéfice (a vers b)\n                for(Echange ech: listeEchanges){\n                    if(donneur.getId() == ech.getDonneur().getId() && receveur.getId() == ech.getReceveur().getId())\n                        this.benefMedicalSequence += ech.getBenefMedical();\n                }\n                if(this instanceof Cycle){\n                    //si c'est un cycle, on calcule le bénéfice retour (b vers a)\n                    for(Echange ech2: listeEchanges){\n                        if(receveur.getId() ==ech2.getDonneur().getId() && donneur.getId()== ech2.getReceveur().getId())\n                            this.benefMedicalSequence += ech2.getBenefMedical();\n                    }\n                }\n            }\n        }\n    }\n\n    private boolean isPositionValide(int position){\n        if(position >= 0 && position <= this.getNbNoeuds()-1)\n            return true;\n        return false;\n    }\n\n    public int getNbNoeuds() {\n        return this.listeNoeuds.size();\n    }\n\n    public Noeud getNoeud(int position){\n        if(this.isPositionValide(position))\n            return this.getListeNoeuds().get(position);\n        return null;\n    }\n\n    public int getBenefMedicalSequence() {\n        return benefMedicalSequence;\n    }\n    public void setTailleMaxSequence(int tailleMaxSequence) {\n        this.tailleMaxSequence = tailleMaxSequence;\n    }\n    public int getTailleMaxSequence() {\n        return tailleMaxSequence;\n    }\n    public void setBenefMedicalTotal(int benefMedicalTotal) {\n        this.benefMedicalSequence = benefMedicalTotal;\n    }\n    public ArrayList<Noeud> getListeNoeuds() {\n        return listeNoeuds;\n    }\n    public String getListeIdNoeuds() {\n        String noeuds = \"\";\n        for(Noeud n : listeNoeuds)\n            noeuds += n.getId() + \" \";\n        return noeuds;\n    }\n\n    public boolean doInsertion(InsertionNoeud infos){\n        System.out.println(\"doInsertion()\");\n        if(infos == null) return false;\n        if(!infos.isMouvementRealisable()) return false;\n\n        Noeud noeud = infos.getNoeud();\n\n        this.benefMedicalSequence += infos.getDeltaBeneficeMedical();\n        this.listeNoeuds.add(infos.getPosition(), noeud);\n\n        //this.ajouterNoeudNonUtilise(noeud, infos.getPosition());\n\n        System.out.println(noeud.getId() + \" : \" + noeud.getClass() + \" ajouté dans \" + infos.getSequence());\n        return true;\n    }\n\n    private boolean isNoeudAjoutable(int position) {\n        if ( (this.getListeNoeuds().size() < this.getTailleMaxSequence()) && (position > 0) && (position <= this.getListeNoeuds().size()) ) {\n            return true;\n        }else {\n            return false;\n        }\n    }\n\n    private boolean isNoeudCompatible(Noeud n, int position) {\n        Noeud noeudPrecedent = this.getListeNoeuds().get(position-1);\n        if (this.getListeNoeuds().size() == position) { // Si le noeud est ajouté en bout de chaine\n            if ( noeudPrecedent.getBenefMedicalVers(n) != -1 ) {\n                return true;\n            }else {\n                return false;\n            }\n        }else {\n            Noeud noeudSuivant = this.getListeNoeuds().get(position);\n            if ( (noeudPrecedent.getBenefMedicalVers(n) != -1 ) && (n.getBenefMedicalVers(noeudSuivant) > -1) ) {\n                return true;\n            }else {\n                return false;\n            }\n        }\n    }\n\n    private int deltaCoutInsertionFin(Noeud noeudToAdd){\n        return this.deltaCoutInsertion(this.getNbNoeuds(), noeudToAdd);\n    }\n\n    public int deltaCoutInsertion(int position, Noeud noeudToAdd) {\n        if(!this.isPositionInsertionValide(position) || noeudToAdd == null)\n            return Integer.MAX_VALUE;\n\n        int deltaCout = 0;\n\n        if(!this.listeNoeuds.isEmpty()){\n            Noeud currentNoeud = this.getCurrent(position);\n            Noeud lastNoeud = this.getPrec(position);\n\n            deltaCout -= lastNoeud.getBenefMedicalVers(currentNoeud);\n            deltaCout += lastNoeud.getBenefMedicalVers(noeudToAdd);\n            deltaCout += noeudToAdd.getBenefMedicalVers(currentNoeud);\n        }\n\n        return deltaCout;\n    }\n\n    // renvoie le noeud de la séquence qui précéde la position position\n    // position doit être comprise entre 0 et n-1\n    public Noeud getPrec(int position){\n        if(position == 0) return this.getListeNoeuds().get(position);\n        return this.getListeNoeuds().get(position-1);\n    }\n\n    // renvoie le noeud de la séquence qui est actuellemment  la position position\n    public Noeud getCurrent(int position) {\n        if(position == this.getNbNoeuds()) return this.getListeNoeuds().get(0);\n        return this.getListeNoeuds().get(position);\n    }\n\n    public abstract boolean equals(Sequence c);\n\n    @Override\n    public int compareTo(Object o) {\n        Sequence s = (Sequence) o;\n        //System.out.println(\"Comparaison : \" + (s.getBenefMedicalSequence() - this.getBenefMedicalSequence()));\n        return s.getBenefMedicalSequence() - this.getBenefMedicalSequence();\n    }\n\n    @Override\n    public String toString() {\n        return \"\\nSequence {\" +\n                \"benefMedicalTotal=\" + benefMedicalSequence +\n                \", listeIdNoeuds=[\" + this.getListeIdNoeuds() + \"]}\";\n    }\n\n    public static void main(String[] args) {\n        InstanceReader reader;\n        try {\n            reader = new InstanceReader(\"instancesInitiales/KEP_p9_n1_k3_l3.txt\");\n            Instance i = reader.readInstance();\n            //System.out.println(i);\n            Noeud[] tab = i.getTabNoeud();\n            Altruiste a1 = (Altruiste) tab[0]; //id=1 - compatibilités vers {Paire{id=9}=10, Paire{id=5}=5, Paire{id=2}=4}\n            Noeud p2 = tab[1]; //id=2 - compatibilités vers {Paire{id=9}=4, Paire{id=3}=7, Paire{id=5}=10, Paire{id=8}=9, Paire{id=4}=4}\n            Noeud p3 = tab[2]; //id=3 - compatibilités vers {Paire{id=9}=4, Paire{id=6}=1, Paire{id=8}=10, Paire{id=2}=2, Paire{id=4}=6, Paire{id=10}=2}\n            Noeud p4 = tab[3]; //id=4 - compatibilités vers {Paire{id=9}=3, Paire{id=3}=6, Paire{id=6}=6, Paire{id=5}=8}\n            Noeud p5 = tab[4]; //id=5 - compatibilités vers {Paire{id=6}=6, Paire{id=7}=8}\n            Noeud p6 = tab[5]; //id=6 - compatibilités vers {Paire{id=3}=2, Paire{id=8}=9, Paire{id=7}=8, Paire{id=4}=9}\n            Noeud p7 = tab[6]; //id=7 - compatibilités vers {Paire{id=3}=1, Paire{id=6}=8, Paire{id=8}=8, Paire{id=2}=10}\n            Noeud p8 = tab[7]; //id=8 - compatibilités vers {Paire{id=9}=9, Paire{id=6}=6, Paire{id=5}=8, Paire{id=7}=7, Paire{id=10}=4}\n            Noeud p9 = tab[8]; //id=9 - compatibilités vers {Paire{id=4}=8}\n            // ### Test ajout (noeuds compatibles et incompatibles, ordres corrects et incorrects) ###\n            Cycle c1 = new Cycle(5); // cycle vide [benef 0]\n            c1.ajouterNoeud(p6, 0);\n            c1.ajouterNoeud(p3, 0); // cycle p6-p3 benef 3\n            c1.ajouterNoeud(p4, 2); // cycle p3-p6-p4 benef 16\n            c1.ajouterNoeud(p8, 1); // cycle p3-p8-p6-p4 benef 16\n            c1.ajouterNoeud(p8, 6); // cycle p3-p8-p6-p4 benef 16\n            System.out.println(c1);\n            // ===> TEST OK\n            // ### Test ajout d'un altruiste ###\n            System.out.println(\"Checker : \"+c1.check());\n        } catch(Exception e){\n            System.out.println(\"ERROR test ajout\");\n            System.out.println(e.toString());\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/rein/transplantation/Sequence.java b/src/main/java/com/rein/transplantation/Sequence.java
--- a/src/main/java/com/rein/transplantation/Sequence.java	(revision c387de4022e2108c28a25456978a90f63a0896b1)
+++ b/src/main/java/com/rein/transplantation/Sequence.java	(date 1655483979689)
@@ -12,11 +12,9 @@
 import com.rein.instance.Noeud;
 import com.rein.io.InstanceReader;
 import com.rein.operateur.*;
-import com.rein.solution.Chaine;
 
 import java.util.ArrayList;
 import java.util.List;
-public abstract class Sequence {
 
 public abstract class Sequence implements Comparable {
 
@@ -30,16 +28,15 @@
                 Noeud donneur = this.listeNoeuds.get(i);
                 Noeud receveur = this.listeNoeuds.get(i+1);
                 //calcul du bénéfice (a vers b)
-                for(Echange ech: listeEchanges){
+                for(Echange ech: listeEchanges)
                     if(donneur.getId() == ech.getDonneur().getId() && receveur.getId() == ech.getReceveur().getId())
                         this.benefMedicalSequence += ech.getBenefMedical();
-                }
+
                 if(this instanceof Cycle){
                     //si c'est un cycle, on calcule le bénéfice retour (b vers a)
-                    for(Echange ech2: listeEchanges){
+                    for(Echange ech2: listeEchanges)
                         if(receveur.getId() ==ech2.getDonneur().getId() && donneur.getId()== ech2.getReceveur().getId())
                             this.benefMedicalSequence += ech2.getBenefMedical();
-                    }
                 }
             }
         }
@@ -64,15 +61,11 @@
     public int getBenefMedicalSequence() {
         return benefMedicalSequence;
     }
-    public void setTailleMaxSequence(int tailleMaxSequence) {
-        this.tailleMaxSequence = tailleMaxSequence;
-    }
+
     public int getTailleMaxSequence() {
         return tailleMaxSequence;
     }
-    public void setBenefMedicalTotal(int benefMedicalTotal) {
-        this.benefMedicalSequence = benefMedicalTotal;
-    }
+
     public ArrayList<Noeud> getListeNoeuds() {
         return listeNoeuds;
     }
@@ -83,6 +76,14 @@
         return noeuds;
     }
 
+    public void setTailleMaxSequence(int tailleMaxSequence) {
+        this.tailleMaxSequence = tailleMaxSequence;
+    }
+
+    public void setBenefMedicalTotal(int benefMedicalSequence) {
+        this.benefMedicalSequence = benefMedicalSequence;
+    }
+
     public boolean doInsertion(InsertionNoeud infos){
         System.out.println("doInsertion()");
         if(infos == null) return false;
@@ -125,11 +126,11 @@
         }
     }
 
-    private int deltaCoutInsertionFin(Noeud noeudToAdd){
+    /*private int deltaCoutInsertionFin(Noeud noeudToAdd){
         return this.deltaCoutInsertion(this.getNbNoeuds(), noeudToAdd);
-    }
+    }*/
 
-    public int deltaCoutInsertion(int position, Noeud noeudToAdd) {
+    /*public int deltaCoutInsertion(int position, Noeud noeudToAdd) {
         if(!this.isPositionInsertionValide(position) || noeudToAdd == null)
             return Integer.MAX_VALUE;
 
@@ -145,7 +146,7 @@
         }
 
         return deltaCout;
-    }
+    }*/
 
     // renvoie le noeud de la séquence qui précéde la position position
     // position doit être comprise entre 0 et n-1
Index: src/main/java/com/rein/operateur/InsertionNoeud.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.rein.operateur;\n\nimport com.rein.instance.Noeud;\nimport com.rein.transplantation.Sequence;\n\npublic class InsertionNoeud extends Operateur {\n\n    private Noeud noeud;\n    private int position;\n\n    public InsertionNoeud(Sequence sequence, Noeud noeud, int position) {\n        super(sequence);\n        this.noeud = noeud;\n        this.position = position;\n        this.deltaBeneficeMedical = this.evalDeltaBenefice();\n        if(this.deltaBeneficeMedical > 0){\n            this.doMouvementIfRealisable();\n        }\n    }\n\n    public Noeud getNoeud() {\n        return noeud;\n    }\n\n    public int getPosition() {\n        return position;\n    }\n\n    @Override\n    protected int evalDeltaBenefice() {\n        if(sequence == null) return Integer.MAX_VALUE;\n        return this.sequence.deltaCoutInsertion(position, noeud);\n    }\n\n    @Override\n    protected boolean doMouvement() {\n        System.out.println(\"doMouvement()\");\n        return this.sequence.doInsertion(this);\n    }\n\n    @Override\n    public String toString() {\n        return \"InsertionNoeud{\"\n                + \"noeud=\" + noeud\n                + \", position=\" + position\n                + \", sequence=\" + super.sequence.toString()\n                + \", deltaBenefice=\" + super.deltaBeneficeMedical + '}';\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/rein/operateur/InsertionNoeud.java b/src/main/java/com/rein/operateur/InsertionNoeud.java
--- a/src/main/java/com/rein/operateur/InsertionNoeud.java	(revision c387de4022e2108c28a25456978a90f63a0896b1)
+++ b/src/main/java/com/rein/operateur/InsertionNoeud.java	(date 1655484001580)
@@ -29,7 +29,8 @@
     @Override
     protected int evalDeltaBenefice() {
         if(sequence == null) return Integer.MAX_VALUE;
-        return this.sequence.deltaCoutInsertion(position, noeud);
+        //return this.sequence.deltaCoutInsertion(position, noeud);
+        return 0;
     }
 
     @Override
Index: src/main/java/com/rein/instance/Instance.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.rein.instance;\n\nimport com.rein.io.InstanceReader;\nimport com.rein.io.exception.ReaderException;\n\nimport java.util.*;\n\n/**\n *\n * @author MartinFrmx\n * 1 avr. 2022\n * Project : rein-poo-le4\n * InstanceReader in io\n * Description : Instance reader class\n */\n\n\npublic class Instance {\n    private final String nom;\n    private int nbPaires;\n    private int nbAltruistes;\n    private final int tailleMaxCycles;\n    private final int tailleMaxChaines;\n    private Noeud[] tabNoeud;\n    private ArrayList<Altruiste> tabAltruistes;\n    private ArrayList<Paire> tabPaires;\n    private ArrayList<Echange> echanges;\n\n\n        /**\n         * Constructeur d'Instances.\n         * @param nom nom du fichier d'instance\n         * @param paires nombre de paires patient-donneur P\n         * @param altruistes  nombre de donneurs altruistes N\n         * @param cycles  taille maximale des cycles K\n         * @param chaines  taille maximale des chaines L\n         */\n    public Instance(String nom, int paires, int altruistes, int cycles, int chaines, Noeud tabNoeud[]) {\n            this.nom = nom;\n            this.nbPaires = paires;\n            this.nbAltruistes = altruistes;\n            this.tailleMaxCycles = cycles;\n            this.tailleMaxChaines = chaines;\n            this.echanges = new ArrayList();\n            this.tabNoeud = tabNoeud;\n            this.tabAltruistes = new ArrayList<Altruiste>();\n            this.tabPaires = new ArrayList<Paire>();\n    }\n\n    public int hashCode() {\n        int hash = 7;\n        hash = 37 * hash + Objects.hashCode(this.nom);\n        return hash;\n    }\n\n    @Override\n    public String toString() {\n        return \"Instance{nom='\" + this.nom + \"', nbPaires=\" + this.nbPaires + \", nbAltruistes=\" + this.nbAltruistes + \", tailleMaxCycles=\" + this.tailleMaxCycles + \", tailleMaxChaines=\" + this.tailleMaxChaines + \", echanges=\" + this.echanges + \"}\";\n    }\n\n    public void setNbPaires(int nbPaires) {\n        this.nbPaires = nbPaires;\n    }\n\n\n    public void setNbAltruistes(int nbAltruistes) {\n        this.nbAltruistes = nbAltruistes;\n    }\n\n    public ArrayList<Altruiste> getTabAltruistes() {\n        return tabAltruistes;\n    }\n\n    public ArrayList<Paire> getTabPaires() {\n        return tabPaires;\n    }\n\n    public String getNom() {\n            return nom;\n        }\n\n    public int getNbPaires() {\n        return nbPaires;\n    }\n\n    public int getNbAltruistes() {\n        return nbAltruistes;\n    }\n\n    public int getTailleMaxCycles() {\n        return tailleMaxCycles;\n    }\n\n    public int getTailleMaxChaines() {\n        return tailleMaxChaines;\n    }\n\n    public ArrayList<Echange> getEchanges() {\n        return echanges;\n    }\n\n\n\n    public Noeud[] getTabNoeud() {\n        return this.tabNoeud;\n    }\n\n    /**\n     * Ajouter l'altruiste à la position indice\n     * dans tabAltruistes\n     * @param indice de l'altruiste à ajouter\n     * @return le tableau de noeuds mis à jour\n     */\n    public Noeud[] addAltruiste(int indice) {\n        this.tabNoeud[indice] = new Altruiste(indice + 1);\n        this.tabAltruistes.add((Altruiste) this.tabNoeud[indice]);\n        return (Noeud[])this.tabNoeud.clone();\n    }\n\n    /**\n     * Ajouter la paire à la position indice\n     * dans tabPaires\n     * @param indice de la paire à ajouter\n     * @return le tableau de noeuds mis à jour\n     */\n    public Noeud[] addPaire(int indice) {\n        this.tabNoeud[indice] = new Paire(indice + 1);\n        this.tabPaires.add((Paire) this.tabNoeud[indice]);\n        return (Noeud[])this.tabNoeud.clone();\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/rein/instance/Instance.java b/src/main/java/com/rein/instance/Instance.java
--- a/src/main/java/com/rein/instance/Instance.java	(revision c387de4022e2108c28a25456978a90f63a0896b1)
+++ b/src/main/java/com/rein/instance/Instance.java	(date 1655484046177)
@@ -47,6 +47,8 @@
             this.tabPaires = new ArrayList<Paire>();
     }
 
+    
+
     public int hashCode() {
         int hash = 7;
         hash = 37 * hash + Objects.hashCode(this.nom);
Index: src/main/java/com/rein/test/AllSolveurs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.rein.test;\n\n// TO CHECK : import des classes Instance, InstanceReader et ReaderException\nimport com.rein.instance.Instance;\nimport com.rein.interface_web.InterfaceWeb;\nimport com.rein.io.InstanceReader;\nimport com.rein.io.exception.ReaderException;\nimport com.rein.solution.Solution;\nimport com.rein.solveur.*;\nimport com.rein.solveur.RechercheArbre;\nimport com.rein.solveur.Solveur;\nimport com.rein.solveur.StrategieBasique;\nimport com.rein.solveur.StrategieBasique2;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n// TO CHECK : import des classes Solution, InsertionSimple et Solveur\n\n/**\n * Cette classe permet de tester et comparer les performances de plusieurs\n * methodes de resolution sur un jeu d'instances du CVRP pour les TPs du\n * cours de LE4-SI POO pour l'optimisation.\n *\n * Les instances sont fournies sur moodle au format '.vrp'.\n *\n * Cette classe permet de resoudre un jeu d'instances avec plusieurs solveurs\n * et d'afficher tous les resultats dans un fichier au format '.csv'.\n * Pour ajouter un nouveau solveur, un commentaire annote avec 'TO ADD' vous\n * permet de facilement localiser a quel endroit on ajoute un tel solveur.\n *\n * Pour que cette classe fonctionne correctement, il faut que certains\n * constructeurs et methodes aient les bonnes signatures.\n * Des commentaires annotes avec 'TO CHECK' vous permettent de facilement reperer\n * dans cette classe les lignes que vous devez verifier et modifier si besoin.\n *\n * @author Maxime Ogier\n */\npublic class AllSolveurs {\n    /**\n     * Tous les solveurs a tester et comparer\n     */\n    private final List<Solveur> solveurs;\n    /**\n     * Nom du chemin du repertoire dans lequel se trouvent les instances a tester\n     */\n    private String pathRepertoire;\n    /**\n     * Toutes les instances a tester\n     */\n    private List<Instance> instances;\n    /**\n     * Resultats obtenus pour chaque couple instance/solveur\n     */\n    private Map<InstanceSolveur, Resultat> resultats;\n    /**\n     * Somme (sur les instances) des resultats pour chaque solveur\n     */\n    private Map<Solveur, Resultat> totalStats;\n\n    /**\n     * Constructeur par donnees.\n     * @param pathRepertoire le chemin du repertoire ou se trouvent toutes les\n     * instances a tester\n     */\n    public AllSolveurs(String pathRepertoire) {\n        this.pathRepertoire = pathRepertoire;\n        solveurs = new ArrayList<>();\n        instances = new ArrayList<>();\n        this.resultats = new HashMap<>();\n        this.addSolveurs();\n        this.readNomInstances();\n        this.totalStats = new HashMap<>();\n        for(Solveur solveur : solveurs) {\n            totalStats.put(solveur , new Resultat());\n        }\n    }\n\n    /**\n     * Ajout de tous les solveurs que l'on souhaite comparer\n     */\n    private void addSolveurs() {\n        // TO CHECK : constructeur par defaut de la classe InsertionSimple\n        //solveurs.add(new StrategieBasique());\n        // TO ADD : par la suite vous ajouterez ici les autres solveurs a tester\n        //solveurs.add(new BestSolution());\n        //solveurs.add(new StrategieBasique2());\n        solveurs.add(new ArbreSequences());\n        //solveurs.add(new RechercheArbre());\n    }\n\n    /**\n     * Lecture de tous les noms des instances a tester.\n     * Ces instances se trouvent dans le repertoire pathRepertoire.\n     * Les instances sont lues et chargees en memoire.\n     */\n    private void readNomInstances() {\n        File folder = new File(pathRepertoire);\n        File[] listOfFiles = folder.listFiles();\n        for (File file : listOfFiles) {\n            if (file.isFile()) {\n                try {\n                    // TO CHECK : constructeur de InstanceReader\n                    InstanceReader reader = new InstanceReader(file.getAbsolutePath());\n                    System.out.println(\"\\nInstance : \"+file.getAbsolutePath() + \"\\n\");\n                    // TO CHECK : lecture d'une instance avec la classe InstanceReader\n                    instances.add(reader.readInstance());\n                } catch (ReaderException ex) {\n                    System.out.println(\"L'instance \"+file.getAbsolutePath()\n                            + \" n'a pas pu etre lue correctement\");\n                }\n            }\n        }\n    }\n\n    /**\n     * Affichage de tous les resultats.\n     * Les resultats sont affiches dans un fichier csv avec separateur ';'.\n     * @param nomFichierResultats nom du fichier de resultats\n     */\n    public void printAllResultats(String nomFichierResultats) {\n        PrintWriter ecriture = null;\n        try {\n            ecriture = new PrintWriter(nomFichierResultats+\".csv\");\n            printEnTetes(ecriture);\n            for(Instance inst : instances) {\n                printResultatsInstance(ecriture, inst);\n            }\n            ecriture.println();\n            printSommeResultats(ecriture);\n        } catch (IOException ex) {\n            System.out.println(\"Erreur fichier ecriture\");\n            System.out.println(ex);\n        }\n        if(ecriture != null) {\n            ecriture.close();\n        }\n    }\n\n    /**\n     * Affichage de la somme des resultats par solveur.\n     * Les valeurs sont ecrites sur une seule ligne.\n     * @param ecriture le writer sur lequel on fait l'ecriture\n     */\n    private void printSommeResultats(PrintWriter ecriture) {\n        ecriture.print(\"SOMME\");\n        for(Solveur solveur : solveurs) {\n            ecriture.print(\";\"+totalStats.get(solveur).formatCsv());\n        }\n    }\n\n    /**\n     * Ecriture des resultats d'une instance pour tous les solveurs.\n     * Pour chque solveur, l'instance est resolue par le solveeur avant que\n     * ses resultats ne soient ecrits sur le fichier.\n     * @param ecriture le writer sur lequel on fait l'ecriture\n     * @param inst l'instane pour laquelle on ecrit les resultats\n     */\n    private void printResultatsInstance(PrintWriter ecriture, Instance inst) throws IOException {\n        // TO CHECK : recuperer le nom de l'instance\n        ecriture.print(inst.getNom());\n        Solution meilleureSol = new Solution();\n        Solveur meilleurSolveur = solveurs.get(0);\n        for(Solveur solveur : solveurs) {\n            long start = System.currentTimeMillis();\n            // TO CHECK : resolution de l'instance avec le solveur\n            Solution sol = solveur.solve(inst);\n            long time = System.currentTimeMillis() - start;\n            // TO CHECK : recperer le cout total de la solution, et savoir si\n            // la solution est valide\n            Resultat result = new Resultat(sol.getBenefMedicalTotal(), time, sol.check());\n            resultats.put(new InstanceSolveur(inst, solveur), result);\n            totalStats.get(solveur).add(result);\n            if(sol.getBenefMedicalTotal() > meilleureSol.getBenefMedicalTotal()){\n                meilleureSol = sol;\n                meilleurSolveur = solveur;\n                ecriture.print(\";\"+result.formatCsv());\n            }\n        }\n        new InterfaceWeb(meilleureSol, meilleurSolveur.getNom()).createHtmlFile();\n        ecriture.println();\n    }\n\n    /**\n     * Eriture des en-tetes dans le fichier de resultats.\n     * @param ecriture le writer sur lequel on fait l'ecriture\n     */\n    private void printEnTetes(PrintWriter ecriture) {\n        for(Solveur solveur : solveurs) {\n            // TO CHECK : recuperer le nom du solveur\n            ecriture.print(\";\"+solveur.getNom()+\";;\");\n        }\n        ecriture.println();\n        for(Solveur solveur : solveurs) {\n            ecriture.print(\";cout\");\n            ecriture.print(\";tps(ms)\");\n            ecriture.print(\";valide ?\");\n        }\n        ecriture.println();\n    }\n\n    /**\n     * Cette classe interne represente le couple instance / solveur\n     */\n    class InstanceSolveur {\n        private Instance instance;\n        private Solveur solveur;\n\n        public InstanceSolveur(Instance instance, Solveur solveur) {\n            this.instance = instance;\n            this.solveur = solveur;\n        }\n\n        public Instance getInstance() {\n            return instance;\n        }\n\n        public Solveur getSolveur() {\n            return solveur;\n        }\n\n        @Override\n        public int hashCode() {\n            int hash = 5;\n            hash = 29 * hash + Objects.hashCode(this.instance);\n            hash = 29 * hash + Objects.hashCode(this.solveur.getNom());\n            return hash;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if (obj == null) {\n                return false;\n            }\n            if (getClass() != obj.getClass()) {\n                return false;\n            }\n            final InstanceSolveur other = (InstanceSolveur) obj;\n            if (!Objects.equals(this.instance, other.instance)) {\n                return false;\n            }\n            if (!Objects.equals(this.solveur.getNom(), other.solveur.getNom())) {\n                return false;\n            }\n            return true;\n        }\n    }\n\n    /**\n     * Cette classe interne represente le resultat a ecrire lorsqu'une instance\n     * a ete resolue.\n     */\n    class Resultat {\n        /**\n         * Le cout de la solution\n         */\n        private int cout;\n        /**\n         * Le temps de resolution en millisecondes\n         */\n        private long timeInMs;\n        /**\n         * Indique si la solution est valide (true) ou non (false)\n         */\n        private boolean check;\n\n        /**\n         * Construteur par defaut\n         */\n        public Resultat() {\n            this.cout = 0;\n            this.timeInMs = 0;\n            this.check = true;\n        }\n\n        /**\n         * Construteur par donnes\n         * @param cout le cout de la solution\n         * @param timeInMs le temps de resolution en millisecondes\n         * @param check vrai si la solution est valide, faux sinon\n         */\n        public Resultat(int cout, long timeInMs, boolean check) {\n            this.cout = cout;\n            this.timeInMs = timeInMs;\n            this.check = check;\n        }\n\n        /**\n         * Ajout d'un resultat pour faire la somme\n         * @param resultat le resultat a ajouter\n         */\n        public void add(Resultat resultat) {\n            this.cout += resultat.cout;\n            this.timeInMs += resultat.timeInMs;\n            this.check = this.check && resultat.check;\n        }\n\n        /**\n         * @return le resultat formatte avec separateur ';' pour erire dans un\n         * fichier csv\n         */\n        public String formatCsv() {\n            return formatSepMilliers(this.cout) + \";\"\n                    + formatSepMilliers(this.timeInMs) + \";\"\n                    + check;\n        }\n\n        /**\n         * Formattage d'un entier avec separateur de milliers.\n         * @param val nombre entier a formatter\n         * @return val formatte avec separateur de milliers\n         */\n        private String formatSepMilliers(long val) {\n            String s = \"\";\n            s += val%1000;\n            val = val/1000;\n            while(val > 0) {\n                s = val%1000 + \" \" + formatMilliers(s);\n                val = val/1000;\n            }\n            return s;\n        }\n\n        /**\n         * @param s une chaine de caracteres\n         * @return s avec des '0' au ebut si sa taille initiale etait infeieure\n         * a 3\n         */\n        private String formatMilliers(String s) {\n            while(s.length() < 3) {\n                s = \"0\"+s;\n            }\n            return s;\n        }\n    }\n\n    /**\n     * Test de perforances de tous les solveurs sur les instances du repertoire\n     * 'instances'.\n     * @param args\n     */\n    public static void main(String[] args) {\n\n        AllSolveurs test = new AllSolveurs(\"instances\");\n        test.printAllResultats(\"results\");\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/rein/test/AllSolveurs.java b/src/main/java/com/rein/test/AllSolveurs.java
--- a/src/main/java/com/rein/test/AllSolveurs.java	(revision c387de4022e2108c28a25456978a90f63a0896b1)
+++ b/src/main/java/com/rein/test/AllSolveurs.java	(date 1655483761597)
@@ -88,9 +88,9 @@
         // TO CHECK : constructeur par defaut de la classe InsertionSimple
         //solveurs.add(new StrategieBasique());
         // TO ADD : par la suite vous ajouterez ici les autres solveurs a tester
-        //solveurs.add(new BestSolution());
+        solveurs.add(new BestSolution());
         //solveurs.add(new StrategieBasique2());
-        solveurs.add(new ArbreSequences());
+        //solveurs.add(new ArbreSequences());
         //solveurs.add(new RechercheArbre());
     }
 
Index: src/main/java/com/rein/solution/Solution.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage com.rein.solution;\nimport com.rein.instance.Instance;\nimport com.rein.io.InstanceReader;\nimport com.rein.operateur.OperateurInterSequence;\nimport com.rein.operateur.OperateurIntraSequence;\nimport com.rein.operateur.OperateurLocal;\nimport com.rein.transplantation.Cycle;\nimport com.rein.transplantation.Sequence;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n/**\n *\n * @author tryla\n */\npublic class Solution {\n\n    private int benefMedicalTotal;\n    private Collection<Sequence> listeSequences;\n    private Instance instance;\n\n    /**\n     * Constructeur de Solution par valeur.\n     * @param instance Instance pour laquelle la solution est créée.\n     * */\n    public Solution(Instance instance) {\n        this.instance = instance;\n        this.listeSequences = new ArrayList<>();\n        this.benefMedicalTotal = 0;\n    }\n\n    /**\n     * Constructeur par copie de Solution.\n     * @param s Solution à copier.\n     * */\n    public Solution(Solution s) {\n        this(s.instance);\n        this.benefMedicalTotal = s.benefMedicalTotal;\n        for(int i=0; i<s.listeSequences.size(); i++)\n            this.listeSequences.add((Sequence) s.listeSequences.toArray()[i]);\n    }\n\n    /**\n     * Méthode permettant d'ajouter le contenu d'un objet SequencesPossibles dans la solution courante.\n     * Les chaines et cycles contenus sont ajoutés à la solution, et la somme des benefs médicaux totaux est affectée à la solution.\n     * @param s SequencesPossibles à ajouter à la solution, objet retourné par la méthode de détection des séquences.\n     * */\n    public void ajouterSequencesSelectionnees(SequencesPossibles s) {\n        this.listeSequences.addAll(s.getChaines());\n        this.listeSequences.addAll(s.getCycles());\n\n        this.benefMedicalTotal += s.getBenefTotal();\n    }\n\n\n    public Solution() {\n        this.listeSequences = null;\n        this.benefMedicalTotal = 0;\n    }\n\n    /**\n     * Méthode d'ajout d'une séquence à la solution courante.\n     * Met à jour la liste des séquences, et le benef médical total de la solution\n     * @param s Sequence à ajouter à la solution.\n     * */\n    public boolean ajouterSequence(Sequence s) {\n        try {\n            this.listeSequences.add(s);\n            this.benefMedicalTotal += s.getBenefMedicalSequence();\n            return true;\n        }catch (Error e) {\n            System.out.println(e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Méthode de calcul du bénéfice\n     * Vide les séquences vides et calcule les bénéfices de chaque séquence.\n     * Fait appel à la méthode suppressionSequencesVides().\n     * */\n    public void calculBenefice(){\n        this.suppressionSequencesVides();\n        for (Sequence seq : listeSequences){\n            if (seq instanceof Chaine)\n            seq.calculBenefice(instance.getEchanges());\n                this.benefMedicalTotal += seq.getBenefMedicalSequence();\n        }\n    }\n\n    /**\n     * Méthode de suppression des chaines vides. Pour chaque sequence de la solution courante,\n     * retire la séquence si cette dernière est vide.\n     * */\n    public void suppressionSequencesVides(){\n        Collection<Sequence> listeSequencesCopy = new ArrayList<>(listeSequences);\n        for (Sequence seq: listeSequencesCopy){\n            //si la séquence comporte 0 ou 1 noeud on la supprime de la solution finale\n            if (seq.getListeNoeuds().size()<=1) {\n                this.listeSequences.remove(seq);\n            }\n        }\n    }\n\n    /**\n     * Méthode de récupération du bénéfice médical de la solution courante.\n     * @return le bénéfice médical de la solution courante.\n     * */\n    public int getBenefMedicalTotal() {\n        return benefMedicalTotal;\n    }\n\n    /**\n     * Méthode de récupération de la liste de séquences de la solution courante.\n     * @return la liste de séquences de la solution courante.\n     * */\n    public Collection<Sequence> getListeSequences() {\n        return listeSequences;\n    }\n\n    /**\n     * Méthode de récupération de l'instance associée à la solution courante.\n     * @return l'instance associée à la solution courante.\n     * */\n    public Instance getInstance() {\n        return instance;\n    }\n\n    /**\n     * Méthode toString de la classe Solution.\n     * @return la chaine descriptive de la solution courante.\n     * */\n    @Override\n    public String toString() {\n        String res = \"\";\n        return \"Solution{\" +\n                \"benefMedicalTotal=\" + benefMedicalTotal +\n                \", \\nlisteSequences=[\" + listeSequences +\n                \"] }\";\n    }\n\n    /**\n     * Checker de Solution :\n     * Condition de validité :\n     * - Est reliée à une instance\n     * - Le Bénéf médical est correctement calculé\n     * - Chaque séquence est valide\n     * Fait appel aux méthodes filles verifInstanceAssociee(), verifSequencesValides() et verifBenefMedicalCorrect().\n     * @return un boolean true si la solution est valide, false sinon.\n     * **/\n    public boolean check() {\n        return (verifInstanceAssociee() && verifSequencesValides() && verifBenefMedicalCorrect());\n    }\n\n    /**\n     * Méthode de vérification de l'instance Associée à la solution courante.\n     * @return un boolean true si la solution découle d'une instance existante, false sinon.\n     * **/\n    private boolean verifInstanceAssociee() {\n        return (this.instance.getNom() != \"\" && this.instance.getNom() != null);\n    }\n\n    /**\n     * Méthode de vérification du benef médical de la solution courante.\n     * @return un boolean true si le benef medical total est bien la somme des benefs medicaux de toutes les séquences, false sinon.\n     * **/\n    private boolean verifBenefMedicalCorrect() {\n        int somme = 0;\n        for (Sequence s: this.listeSequences)\n            somme += s.getBenefMedicalSequence();\n        return (somme == this.benefMedicalTotal);\n    }\n\n    /**\n     * Méthode de vérification de la validité des séquences de la solution courante.\n     * @return un boolean true si l'ENSEMBLE des séquences de la solution sont valides, false sinon.\n     * **/\n    private boolean verifSequencesValides() {\n        boolean ans = false;\n        for (Sequence s: this.listeSequences){\n            if (s instanceof Chaine){\n                ans = ((Chaine) s).check();\n            }\n            else\n            {ans = ((Cycle) s).check();\n            }\n            if (!ans)\n                return false;\n        }\n        return true;\n    }\n\n    /**\n     * Méthode d'export de la solution courante.\n     * @return une chaine contenant l'export de la solution courante.\n     * */\n    public String exportSol() {\n        StringBuilder stringSol = new StringBuilder(\"// Cout total de la solution\\n\" +\n            this.getBenefMedicalTotal() +\n            \"\\n\\n// Description de la solution\\n\" +\n            \"// Cycles\\n\");\n            for(Sequence s : this.getListeSequences()) {\n                if (s.getClass().toString().equals(\"class com.rein.transplantation.Cycle\")){\n                    stringSol.append(s.getListeIdNoeuds() + \"\\n\");\n                }\n            }\n            stringSol.append(\"\\n// Chaines\\n\");\n            for(Sequence s : this.getListeSequences()) {\n                if (s.getClass().toString().equals(\"class com.rein.solution.Chaine\")){\n                    stringSol.append(s.getListeIdNoeuds() + \"\\n\");\n                }\n            }\n            stringSol.append(\"\\n\");\n        return stringSol.toString();\n    }\n\n    /**\n     * Méthode fille de la méthode de recherche locale.\n     * Permet d'effectuer un mouvement au sein de séquences manipulées pour générer une solution.\n     * Fait appel à la méthode fille doMouvementIfRealisable().\n     * @param infos operateur local associé à la transaction.\n     * @return un boolean true so l'opération a bien été effectuée, false si elle est impossible.\n     * */\n    public boolean doMouvementRechercheLocale(OperateurLocal infos){\n        if(infos == null) return false;\n        if(!infos.doMouvementIfRealisable()) return false;\n\n        this.benefMedicalTotal += infos.getDeltaBeneficeMedical();\n        if(!this.check()){\n            System.out.println(\"ERROR doMouvementRechercheLocale\");\n            System.out.println(infos);\n            System.exit(-1);\n        }\n        return true;\n    }\n\n    /**\n     *\n     * Retourne true si la solution comporte au moins une séquence de la classe (Chaine/Cycle) passée en argument\n     */\n    public boolean hasSequenceOfClass(Class classe){\n        for(Sequence s : this.getListeSequences()) {\n            if (s.getClass() == classe){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        InstanceReader reader;\n        try {\n            reader = new InstanceReader(\"instancesInitiales/KEP_p9_n0_k3_l0.txt\");\n            Instance i = reader.readInstance();\n            Solution sZeroEchange = new Solution(i);\n            System.out.println(\"Solution à 0 échange: \\n\\t\" + sZeroEchange);\n        } catch (Exception ex) {\n            Logger.getLogger(Instance.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/rein/solution/Solution.java b/src/main/java/com/rein/solution/Solution.java
--- a/src/main/java/com/rein/solution/Solution.java	(revision c387de4022e2108c28a25456978a90f63a0896b1)
+++ b/src/main/java/com/rein/solution/Solution.java	(date 1655483795552)
@@ -6,14 +6,10 @@
 package com.rein.solution;
 import com.rein.instance.Instance;
 import com.rein.io.InstanceReader;
-import com.rein.operateur.OperateurInterSequence;
-import com.rein.operateur.OperateurIntraSequence;
-import com.rein.operateur.OperateurLocal;
 import com.rein.transplantation.Cycle;
 import com.rein.transplantation.Sequence;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.LinkedHashSet;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 /**
@@ -220,27 +216,7 @@
             stringSol.append("\n");
         return stringSol.toString();
     }
-
-    /**
-     * Méthode fille de la méthode de recherche locale.
-     * Permet d'effectuer un mouvement au sein de séquences manipulées pour générer une solution.
-     * Fait appel à la méthode fille doMouvementIfRealisable().
-     * @param infos operateur local associé à la transaction.
-     * @return un boolean true so l'opération a bien été effectuée, false si elle est impossible.
-     * */
-    public boolean doMouvementRechercheLocale(OperateurLocal infos){
-        if(infos == null) return false;
-        if(!infos.doMouvementIfRealisable()) return false;
-
-        this.benefMedicalTotal += infos.getDeltaBeneficeMedical();
-        if(!this.check()){
-            System.out.println("ERROR doMouvementRechercheLocale");
-            System.out.println(infos);
-            System.exit(-1);
-        }
-        return true;
-    }
-
+    
     /**
      *
      * Retourne true si la solution comporte au moins une séquence de la classe (Chaine/Cycle) passée en argument
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"5dbe1660-c9ae-497e-83b8-a85dacef2117\" name=\"Changes\" comment=\"Ajout solution ArbreSequences opérationel + commentaires et nettoyage de code\">\n      <change afterPath=\"$PROJECT_DIR$/results/KEP_p250_n83_k5_l17.txt.html\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_05_2022_15_49__Changes_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_03_06_2022_11_32__Changes_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/instance/Instance.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/instance/Instance.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/instance/Noeud.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/instance/Noeud.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/interface_web/InterfaceWeb.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/interface_web/InterfaceWeb.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/io/InstanceReader.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/io/InstanceReader.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/operateur/Operateur.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/operateur/Operateur.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/solution/Arbre.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/solution/Arbre.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/solution/Chaine.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/solution/Chaine.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/solution/Selecteur.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/solution/Selecteur.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/solution/SequencesPossibles.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/solution/SequencesPossibles.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/solution/Solution.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/solution/Solution.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/solveur/ArbreSequences.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/solveur/ArbreSequences.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/solveur/RechercheArbre.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/solveur/RechercheArbre.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/solveur/StrategieBasique.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/solveur/StrategieBasique.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/solveur/StrategieBasique2.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/solveur/StrategieBasique2.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/test/AllSolveurs.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/test/AllSolveurs.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/rein/transplantation/Sequence.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/rein/transplantation/Sequence.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/instance/Instance.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/instance/Instance.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/instance/Noeud.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/instance/Noeud.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/interface_web/InterfaceWeb.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/interface_web/InterfaceWeb.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/io/InstanceReader.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/io/InstanceReader.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/solution/Arbre.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/solution/Arbre.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/solution/Chaine.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/solution/Chaine.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/solution/Selecteur.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/solution/Selecteur.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/solution/Solution.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/solution/Solution.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/solution/sequencesPossibles.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/solution/sequencesPossibles.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/solveur/ArbreSequences.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/solveur/ArbreSequences.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/solveur/RechercheArbre.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/solveur/RechercheArbre.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/solveur/StrategieBasique.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/solveur/StrategieBasique.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/solveur/StrategieBasique2.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/solveur/StrategieBasique2.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/test/AllSolveurs$InstanceSolveur.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/test/AllSolveurs$InstanceSolveur.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/test/AllSolveurs$Resultat.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/test/AllSolveurs$Resultat.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/rein/test/AllSolveurs.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/rein/test/AllSolveurs.class\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"generation-solution\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"HighlightingSettingsPerFile\">\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/com/rein/transplantation/Sequence.java\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/pom.xml\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/com/rein/io/InstanceReader.java\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/com/rein/instance/Noeud.java\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/com/rein/solveur/StrategieBasique.java\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/com/rein/solution/Solution.java\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/com/rein/transplantation/Cycle.java\" root0=\"FORCE_HIGHLIGHTING\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"MavenImportPreferences\">\n    <option name=\"generalSettings\">\n      <MavenGeneralSettings>\n        <option name=\"useMavenConfig\" value=\"true\" />\n      </MavenGeneralSettings>\n    </option>\n  </component>\n  <component name=\"ProjectId\" id=\"27SUnC0SlEJiuSSWMXiQmxdrOdb\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"Git.Branch.Popup.ShowAllRemotes\" value=\"true\" />\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"project.structure.last.edited\" value=\"Project\" />\n    <property name=\"project.structure.proportion\" value=\"0.0\" />\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.lookFeel\" />\n  </component>\n  <component name=\"ReaderModeSettings\">\n    <option name=\"enabled\" value=\"false\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"ExtractSuperBase.RECENT_KEYS\">\n      <recent name=\"com.rein.solution\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Application.AllSolveurs\">\n    <configuration name=\"AllSolveurs\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.rein.test.AllSolveurs\" />\n      <module name=\"rein-poo-le4\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"com.rein.test.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Arbre\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.rein.solution.Arbre\" />\n      <module name=\"rein-poo-le4\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"com.rein.solution.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"ArbreSequences\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.rein.solveur.ArbreSequences\" />\n      <module name=\"rein-poo-le4\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"com.rein.solveur.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"RechercheArbre\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.rein.solveur.RechercheArbre\" />\n      <module name=\"rein-poo-le4\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"com.rein.solveur.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"StrategieBasique2\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.rein.solveur.StrategieBasique2\" />\n      <module name=\"rein-poo-le4\" />\n      <option name=\"PROGRAM_PARAMETERS\" value=\"-inst KEP_p250_n83_k5_l17.txt -dSol solutions_test\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"com.rein.solveur.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\n      <option name=\"filePath\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <list>\n      <item itemvalue=\"Application.Arbre\" />\n      <item itemvalue=\"Application.StrategieBasique2\" />\n      <item itemvalue=\"Application.AllSolveurs\" />\n      <item itemvalue=\"Application.RechercheArbre\" />\n      <item itemvalue=\"Application.ArbreSequences\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.AllSolveurs\" />\n        <item itemvalue=\"Application.ArbreSequences\" />\n        <item itemvalue=\"Application.RechercheArbre\" />\n        <item itemvalue=\"Application.StrategieBasique2\" />\n        <item itemvalue=\"Application.Arbre\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"5dbe1660-c9ae-497e-83b8-a85dacef2117\" name=\"Changes\" comment=\"init operateurs\" />\n      <created>1649313157800</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1649313157800</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"sout martrein\">\n      <created>1649313386845</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1649313386845</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"test\">\n      <created>1652250070126</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1652250070127</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"init operateurs\">\n      <created>1652263593028</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1652263593028</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"init operateurs + recherche locale\">\n      <created>1653124103306</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1653124103306</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"propal°1 arbre\">\n      <created>1653210542262</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1653210542262</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"propal°2 arbre\">\n      <created>1653399302500</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1653399302500</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"problème d'orientation des flèches pour les cycles de 3 résolu\">\n      <created>1653563731687</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1653563731687</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"affichage flèche directions canva + liste des altruistes non-utilisés\">\n      <created>1653581429585</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1653581429585</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"affichage liste des paires non-utilisés\">\n      <created>1653582116200</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1653582116200</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"affichage nombre de noeuds non-utilisés\">\n      <created>1653582553616</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1653582553616</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"merge conflits interface-graphique vers dev fait\">\n      <created>1654276345022</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1654276345022</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"Légères corrections et nettoyage\">\n      <created>1654360045711</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1654360045711</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"Refonte méthode solve() de ArbreSequences\">\n      <created>1654767762042</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1654767762042</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"Optimisation de la méthode solve d'ArbreSequence\">\n      <created>1655215714542</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1655215714542</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"Ajout solution ArbreSequences opérationel + commentaires et nettoyage de code\">\n      <created>1655451273577</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1655451273577</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"16\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"dev\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n        <entry key=\"a52d546c-5c65-49e3-9de2-fc43d76e79bd\">\n          <value>\n            <State>\n              <option name=\"CUSTOM_BOOLEAN_PROPERTIES\">\n                <map>\n                  <entry key=\"Show.Git.Branches\" value=\"true\" />\n                </map>\n              </option>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"origin/strategie-1\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"RECENT_FILTERS\">\n      <map>\n        <entry key=\"Branch\">\n          <value>\n            <list>\n              <RecentGroup>\n                <option name=\"FILTER_VALUES\">\n                  <option value=\"origin/interface-graphique\" />\n                </option>\n              </RecentGroup>\n              <RecentGroup>\n                <option name=\"FILTER_VALUES\">\n                  <option value=\"origin/strategie-1\" />\n                </option>\n              </RecentGroup>\n            </list>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"sout martrein\" />\n    <MESSAGE value=\"test\" />\n    <MESSAGE value=\"init operateurs\" />\n    <MESSAGE value=\"init operateurs + recherche locale\" />\n    <MESSAGE value=\"propal°1 arbre\" />\n    <MESSAGE value=\"propal°2 arbre\" />\n    <MESSAGE value=\"problème d'orientation des flèches pour les cycles de 3 résolu\" />\n    <MESSAGE value=\"affichage flèche directions canva + liste des altruistes non-utilisés\" />\n    <MESSAGE value=\"affichage liste des paires non-utilisés\" />\n    <MESSAGE value=\"affichage nombre de noeuds non-utilisés\" />\n    <MESSAGE value=\"merge conflits interface-graphique vers dev fait\" />\n    <MESSAGE value=\"Légères corrections et nettoyage\" />\n    <MESSAGE value=\"Refonte méthode solve() de ArbreSequences\" />\n    <MESSAGE value=\"Optimisation de la méthode solve d'ArbreSequence\" />\n    <MESSAGE value=\"Ajout solution ArbreSequences opérationel + commentaires et nettoyage de code\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ajout solution ArbreSequences opérationel + commentaires et nettoyage de code\" />\n    <option name=\"GROUP_MULTIFILE_MERGE_BY_DIRECTORY\" value=\"true\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.lang.StackOverflowError\" package=\"java.lang\" />\n          <option name=\"timeStamp\" value=\"1\" />\n        </breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c387de4022e2108c28a25456978a90f63a0896b1)
+++ b/.idea/workspace.xml	(date 1655483761560)
@@ -4,43 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5dbe1660-c9ae-497e-83b8-a85dacef2117" name="Changes" comment="Ajout solution ArbreSequences opérationel + commentaires et nettoyage de code">
-      <change afterPath="$PROJECT_DIR$/results/KEP_p250_n83_k5_l17.txt.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_05_2022_15_49__Changes_.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_03_06_2022_11_32__Changes_.xml" beforeDir="false" />
+    <list default="true" id="f2c37186-dc89-42bb-b8b3-2fe95fd4d955" name="Changes" comment="merge comment">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/instance/Instance.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/instance/Instance.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/instance/Noeud.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/instance/Noeud.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/interface_web/InterfaceWeb.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/interface_web/InterfaceWeb.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/io/InstanceReader.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/io/InstanceReader.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/operateur/Operateur.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/operateur/Operateur.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/solution/Arbre.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/solution/Arbre.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/solution/Chaine.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/solution/Chaine.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/solution/Selecteur.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/solution/Selecteur.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/solution/SequencesPossibles.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/solution/SequencesPossibles.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/solution/Solution.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/solution/Solution.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/solveur/ArbreSequences.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/solveur/ArbreSequences.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/solveur/RechercheArbre.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/solveur/RechercheArbre.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/solveur/StrategieBasique.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/solveur/StrategieBasique.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/solveur/StrategieBasique2.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/solveur/StrategieBasique2.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/test/AllSolveurs.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/test/AllSolveurs.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/rein/transplantation/Sequence.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/rein/transplantation/Sequence.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/instance/Instance.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/instance/Instance.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/instance/Noeud.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/instance/Noeud.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/interface_web/InterfaceWeb.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/interface_web/InterfaceWeb.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/io/InstanceReader.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/io/InstanceReader.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/solution/Arbre.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/solution/Arbre.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/solution/Chaine.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/solution/Chaine.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/solution/Selecteur.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/solution/Selecteur.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/solution/Solution.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/solution/Solution.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/solution/sequencesPossibles.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/solution/sequencesPossibles.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/solveur/ArbreSequences.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/solveur/ArbreSequences.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/solveur/RechercheArbre.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/solveur/RechercheArbre.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/solveur/StrategieBasique.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/solveur/StrategieBasique.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/solveur/StrategieBasique2.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/solveur/StrategieBasique2.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/test/AllSolveurs$InstanceSolveur.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/test/AllSolveurs$InstanceSolveur.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/test/AllSolveurs$Resultat.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/test/AllSolveurs$Resultat.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/rein/test/AllSolveurs.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/rein/test/AllSolveurs.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
